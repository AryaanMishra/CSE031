TPS Activity 1:
        1. The program is expected to print the value of four_ints[0] in hexadecimal format, which is 2 (decimal value) or 0x2 (hexadecimal value).
        2. Without any changes to the code, I would expect the program to print '44434241' if four_ints[0] is printed again at the end of the program, as the loop for(i = 0; i < 4; i++) four_c[i] = 'A' + i; has overwritten the contents of four_ints.
        3. It prints as '44434241'.
        4. This is expected to print 0x2, which is not surprising as all the other elements of four_ints are still initialized to 2.
        5. a. Only one array, four_ints, was allocated in this program. four_c is a pointer to a character, not an array.
        b. four_ints and four_c are pointing to the same memory location after the line four_c = (char*)four_ints;. Initially, they were pointing to different locations.
        c. It prints as '0061FF08' for both addresses.
        6. The difference in addresses between two consecutive elements should be 4 bytes (or 0x4 in hexadecimal), as each int occupies 4 bytes of memory.
        7. 
                +---+---+---+---+
                | D | C | B | A |
                +---+---+---+---+
                ^   ^   ^   ^
                Higher addresses
        8. The difference in addresses between two consecutive elements should be 1 byte (or 0x1 in hexadecimal), as four_c is a pointer to a character (char), and each char occupies 1 byte of memory.
        9. 
                +---+---+---+---+
                | A | B | C | D |
                +---+---+---+---+
                ^   ^   ^   ^
                Higher addresses
        10. When the index of four_ints is incremented, C moves to the next int in memory, which is 4 bytes away from the current address. This is due to the size of the int data type.
                On the other hand, when the index of four_c is incremented, C moves to the next char in memory, which is 1 byte away from the current address. 
                This is because four_c is a pointer to char, and C treats the memory as a sequence of bytes.

TPS Activity 2:

        1. The line int **arr = (int**)malloc(n * sizeof(int*)); allocates memory for an array of pointers to integers (int*). The malloc function allocates n * sizeof(int*) bytes of memory, which is enough space to store n pointers to integers. This line creates the outer array, which will hold the pointers to the rows of the 2D array.
        2. To access the ith value of the outer array arr, we use arr[i]. This gives us the pointer to the ith row of the 2D array.
        4. We need to pass the size of the array as an argument to the printArray function because the function needs to know the dimensions of the array to correctly print all the elements. Without the size information, the function would not know when to stop iterating over the array.
        5. 
    